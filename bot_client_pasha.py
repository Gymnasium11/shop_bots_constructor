from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from database import read
import telebot

def run(token):
    bot = Bot(token=token)
    dp = Dispatcher(bot)

    @dp.message_handler(commands=['start'])
    async def start(message):
        text = f'{message.from_user.first_name + " " + message.from_user.last_name}, –¥–æ–±—Ä–æ' \
               '–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ¬´Store¬ª bot!\n' \
               '–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: –•–•.–•–•.–•–•\n' \
               '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: X\n' \
               '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: X\n' \
               '–ó–¥–µ—Å—å –í—ã –Ω–∞–π–¥–µ—Ç–µ –∏ –∑–∞–∫–∞–∂–∏—Ç–µ —Ç–æ—Ç' \
               '—Å–∞–º—ã–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–≤–Ω–æ –∏—Å–∫–∞–ª–∏!' \
               '–õ–∏–±–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä!\n' \
               ':)'
        a = await bot.get_me()
        print(a)
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        kb.add(types.KeyboardButton('üìñ–ö–∞—Ç–∞–ª–æ–≥'))
        kb.add(types.KeyboardButton('üõí–ö–æ—Ä–∑–∏–Ω–∞'))
        kb.add(types.KeyboardButton('üé™–û –º–∞–≥–∞–∑–∏–Ω–µ'))
        kb.add(types.KeyboardButton('üìû–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'))
        await message.answer(text, reply_markup=kb)
        print(message)

    @dp.message_handler(lambda message: message.text == 'üìñ–ö–∞—Ç–∞–ª–æ–≥')
    async def catalog(message):
        id_shop = 1
        text = "–ö–∞—Ç–∞–ª–æ–≥"
        rez = read('SELECT * FROM product WHERE id_shop=1')
        print(rez)

        rez = [('Honey',
                'https://medrossii.ru/images/001/%D0%91%D0%B0%D1%88%D0%BA%D0%B8%D1%80%D1%81%D0%BA%D0%B8%D0%B9%20%D0%BC'
                '%D0%B5%D0%B4.jpg', 1),
               ('Milk', 'https://upload.wikimedia.org/wikipedia/commons/0/0e/Milk_glass.jpg', 2)]

        for i in rez:
            id = i[2]
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(callback_data=f'further_{id}', text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ'))
            kb.add(types.InlineKeyboardButton(callback_data=f'totrash_{id}', text='–í –∫–æ—Ä–∑–∏–Ω—É'))
            await message.answer_photo(i[1], caption=i[0], reply_markup=kb)
        await message.answer(text)

    @dp.message_handler(lambda message: message.text == 'üõí–ö–æ—Ä–∑–∏–Ω–∞')
    async def trash(message):
        trash = [('Honey',
                  'https://medrossii.ru/images/001/%D0%91%D0%B0%D1%88%D0%BA%D0%B8%D1%80%D1%81%D0%BA%D0%B8%D0%B9%20%D0%BC'
                  '%D0%B5%D0%B4.jpg'),
                 ('Milk', 'https://upload.wikimedia.org/wikipedia/commons/0/0e/Milk_glass.jpg')]
        text = '–ö–æ—Ä–∑–∏–Ω–∞' \
               '**–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç** *–∫—É—Ä—Å–∏–≤*'

        await message.answer(text, parse_mode='Markdown')

        for i in trash:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(callback_data=f'further_{id}', text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ'))
            kb.add(types.InlineKeyboardButton(callback_data='nothing', text='–Ω–∞–∑–∞–¥'))
            await message.answer_photo(i[1], caption=i[0], reply_markup=kb)

    @dp.message_handler(lambda message: message.text == 'üé™–û –º–∞–≥–∞–∑–∏–Ω–µ')
    async def about_shop(message):
        text = '–†–µ–π—Ç–∏–Ω–≥: X\n' \
               '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: X\n' \
               '–ù–∞–∑–≤–∞–Ω–∏–µ: XXX\n' \
               '–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: XX.XX.XX\n' \
               '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: X\n' \
               '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: XXX\n' \
               '–û–ø–∏—Å–∞–Ω–∏–µ: XXX\n' \
               '–ö–æ–Ω—Ç–∞–∫—Ç—ã: XXX\n'
        await message.answer(text)

    @dp.message_handler(lambda message: message.text == 'üìû–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
    async def contact_with_operator(message):
        text = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Uxuxd"
        await message.answer(text)

    @dp.callback_query_handler(lambda call: call.data.startswith('further'))
    async def update_further(call):
        d = call.data
        id = int(d.split('_')[1])
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(callback_data=f'fromfurther_{id}', text='–ù–∞–∑–∞–¥'))
        kb.add(types.InlineKeyboardButton(callback_data=f'totrash_{id}', text='–í –∫–æ—Ä–∑–∏–Ω—É'))
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=kb
        )

    @dp.callback_query_handler(lambda call: call.data.startswith('fromfurther'))
    async def update_from_futher(call):
        d = call.data
        id = int(d.split('_')[1])
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(callback_data=f'further_{id}', text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ'))
        kb.add(types.InlineKeyboardButton(callback_data=f'totrash_{id}', text='–í –∫–æ—Ä–∑–∏–Ω—É'))
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=kb
        )

    @dp.message_handler()
    async def echo_message(msg: types.Message):
        await bot.send_message(msg.from_user.id, msg.text)

    executor.start_polling(dp)
